{"cells":[{"metadata":{"_cell_guid":"942d2769-b354-49bf-a4c1-2ab0a429fe8f","_uuid":"40d43137400dee34df4357d933eb4d56f71d1db6"},"cell_type":"markdown","source":"## Titanic Survivor Prediction","outputs":[],"execution_count":null},{"metadata":{"_cell_guid":"45735a30-0b34-4045-87bb-d39a71568973","_uuid":"b425ff477b9f657573f224a246063ff31b500271"},"cell_type":"markdown","source":"Getting started, lets import required libraries & pull in the train and test data","outputs":[],"execution_count":null},{"metadata":{"_cell_guid":"b9be2810-92d0-44ab-a37c-464742b505f2","_uuid":"d3d228414400adc16b660081fea420813c7eb26d","collapsed":true,"trusted":true},"cell_type":"code","source":"#importing required libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn import tree, linear_model, metrics\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\n\nwarnings.filterwarnings('ignore')\nsns.set_style('whitegrid')\n\n%matplotlib inline","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"94f0a0d5-103a-4008-99e7-9fd21e6637b1","_uuid":"9582d0317f8442bceaca0f2485354435f5134892","collapsed":true,"trusted":true},"cell_type":"code","source":"#read the train and test sets and storing them in pd dataframes\ntrain = pd.read_csv('../input/train.csv')\ntest = pd.read_csv('../input/test.csv')","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"82af95c6-c137-4535-aa80-1173a8e460ee","_uuid":"3047bf9566aaeec7b8ebffbe126f44a05e965369"},"cell_type":"markdown","source":"Lets look at the size of the total data and its split in train and test","outputs":[],"execution_count":null},{"metadata":{"_cell_guid":"caf939b7-3bc0-43ac-b158-7677ee467d3e","_uuid":"cbccc48011af0f5f9d432702d47d1ccb495c7837","trusted":true},"cell_type":"code","source":"print(train.shape)\nprint(test.shape)","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"145ed8d1-6d53-4597-a43d-6e2795ef5252","_uuid":"71d652b51ec9499f3306d3f2779cda76b65b9ab8"},"cell_type":"markdown","source":"ok look like roughly 70-30% split, lets look at a sample fo what's in the data sets","outputs":[],"execution_count":null},{"metadata":{"_cell_guid":"bc021d98-a5ff-4635-b3f5-d11999023b4b","_uuid":"7297c34c7c57fdc8e9676adf0f6dde9c6cb72c9c","trusted":true},"cell_type":"code","source":"train.head()","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"31fe24eb-8794-4553-a0b6-a859920e923f","_uuid":"d1d9523cf569fbb102c5543e6943be1d35c7cef3","trusted":true},"cell_type":"code","source":"test.head()","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"e050c3fa-d917-47bb-9917-69ef45759e4b","_uuid":"e7a2d663c509597073838302a0db635e559a11a7"},"cell_type":"markdown","source":"### Checking for Missing Data","outputs":[],"execution_count":null},{"metadata":{"_cell_guid":"6cad6809-b386-49c0-bd02-f992bbdff771","_uuid":"3ce706a33297163e8ba3aec78ebd2cf77a6ebac9","trusted":true},"cell_type":"code","source":"for col in train.columns:\n    print('number of null values in ' + col + ': ' + str(train[pd.isnull(train[col])].shape[0]))","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"c135b745-7488-4a93-b2ff-8ff0871d98f3","_uuid":"b908bd306a09211d17a9f346ad0a33a19ef199ba"},"cell_type":"markdown","source":"Age, Cabin and Embarked are the 3 columns which have null values, may need to estimate them in order to use that data for predictions","outputs":[],"execution_count":null},{"metadata":{"_cell_guid":"aedde4cf-27c5-4255-8e4c-2dc94bc4c00b","_uuid":"513d73534be4d023a8f4dc92db428b8c29242510","trusted":true},"cell_type":"code","source":"for col in test.columns:\n    print('number of null values in ' + col + ': ' + str(test[pd.isnull(test[col])].shape[0]))","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"0006d0b6-ef5c-46a9-85b6-d60e4f322034","_uuid":"1bed1d9101fe942f78d8c42bbeb1840c7560794b"},"cell_type":"markdown","source":"Age, fare and cabin have null values in the test set. Now lets look into how the different columns are effecting the survival rates to find the features for an initial model","outputs":[],"execution_count":null},{"metadata":{"_cell_guid":"2c182e53-34e1-4796-b1e2-bf6860099f7f","_uuid":"d9732f176622359f7eb06ef228f7157e9558e834"},"cell_type":"markdown","source":"## Picking Predictive Features\n\nWell, if you have seen the titanic movie it seemed like they were prioritizing women and children to be boarded into lifeboats and ofcourse people from higher classes. Let's see if this hypothesis holds","outputs":[],"execution_count":null},{"metadata":{"_cell_guid":"b1619e88-c321-44b6-9b38-79946aabef7c","_uuid":"47b649a784ca28eae7838c45e84103a4ffba3aab","trusted":true},"cell_type":"code","source":"train.pivot_table(index='Sex', values='Survived', aggfunc='mean').plot(kind='bar')\nprint(train.pivot_table(index='Sex', values='Survived', aggfunc='mean'))","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"dbf6ca80-5062-4bfd-86c5-0cfe6ecdc598","_uuid":"f6bf404a8a10bb310bb4b1d5748f11d0bc7640be"},"cell_type":"markdown","source":"Trying to see if the kind of sex distribution in the test data is similar to training data","outputs":[],"execution_count":null},{"metadata":{"_cell_guid":"03f9090f-c60f-4a3a-9beb-09d0230dd437","_uuid":"8da2677a28534c50ebd1a876add7de333b183e86","trusted":true},"cell_type":"code","source":"fig, ax = plt.subplots(nrows=1, ncols=2, figsize = (12,5))\ntrain.pivot_table(index='Sex', values='Survived', aggfunc='count').plot(kind='bar', ax=ax[0])\ntest.pivot_table(index='Sex', values='PassengerId', aggfunc='count').plot(kind='bar', ax=ax[1])","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"a67fa8b6-76a1-4dfb-9613-148c67af0d6e","_uuid":"20bc431ebf0f192d36440db9cb49744a8d740f35"},"cell_type":"markdown","source":"so sex is definitely a big factor in survival rate, let's see how it interacts with class, assuming 1st class passengers get preferential treatment and can have higher survival rates","outputs":[],"execution_count":null},{"metadata":{"_cell_guid":"2a163984-7545-401d-897c-78bdcf8ef8d5","_uuid":"9ec09f5f40bbe78af88635de3ad72c8a430dbfad","trusted":true},"cell_type":"code","source":"train.pivot_table(columns='Sex', index='Pclass',\\\n                  values='Survived', aggfunc='mean').plot(kind='bar')\nprint(train.pivot_table(columns='Sex', index='Pclass',\\\n                  values='Survived', aggfunc='mean'))\nprint(train.pivot_table(columns='Sex', index='Pclass',\\\n                  values='Survived', aggfunc='count'))","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"5b435c70-4af8-48d4-953a-dbf2533d8d6c","_uuid":"c61d101bd4f7d5743e5f0a30a0fe4c1003d7b2a4","trusted":true},"cell_type":"code","source":"fig, ax = plt.subplots(nrows=1, ncols=2, figsize = (12,5))\ntrain.pivot_table(index='Pclass', values='Survived', aggfunc='count').plot(kind='bar', ax=ax[0])\ntest.pivot_table(index='Pclass', values='PassengerId', aggfunc='count').plot(kind='bar', ax=ax[1])","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"7a4ca418-1e5e-4168-86cd-f3eb31300318","_uuid":"444bd777136927d6cc17b35e9512f6984bd27e80"},"cell_type":"markdown","source":"Interesting! looks like almost all the women in 1st and 2nd class survived. Men on the other hand still survive less but men in the first class have a better chance of surviving. Ok so lets take these 2 features and build a first model. First a logistic regression model as baseline, then, I will be using the decision tree algorithm since it would be well suited to this problem.","outputs":[],"execution_count":null},{"metadata":{"_cell_guid":"d88aaf52-73be-4347-a73d-add520081b9b","_uuid":"983164a197128975fe938a89febfaf1038230485"},"cell_type":"markdown","source":"## First model - with sex and Pclass as the features","outputs":[],"execution_count":null},{"metadata":{"_cell_guid":"d5ecf43b-d1a1-4cfc-905f-0033d7ce7208","_uuid":"74399b86a23817bb098e8fd2d462d14de136751e","collapsed":true,"trusted":true},"cell_type":"code","source":"train = train.join(pd.get_dummies(train.Sex))\ntest = test.join(pd.get_dummies(test.Sex))","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"5d0f8233-5585-4e63-be07-c23e7e46010a","_uuid":"8cfdedf745f1259cd197e125ea5b178ee767c000","collapsed":true,"scrolled":true,"trusted":true},"cell_type":"code","source":"class_dummies = pd.get_dummies(train.Pclass)\nclass_dummies.columns = ['Higher', 'Middle', 'Lower']\ntrain = train.join(class_dummies)","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"65d62f68-d99b-4131-8179-166d4316e73a","_uuid":"33e66f411b6e953d819269db8783bfaa462be3e4","collapsed":true,"trusted":true},"cell_type":"code","source":"X_train = train[['male', 'female','Higher', 'Middle', 'Lower']]\ny = train['Survived']\n\nclass_dummies = pd.get_dummies(test.Pclass)\nclass_dummies.columns = ['Higher', 'Middle', 'Lower']\ntest = test.join(class_dummies)\nX_test = test[['male', 'female', 'Higher', 'Middle', 'Lower']]","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"45ac2294-421f-4632-99e7-5a3498e0b3d2","_uuid":"dd5974415bb2d28317e5b30ec1244fbcd062cd65","trusted":true},"cell_type":"code","source":"log_reg = linear_model.LogisticRegression()\nbaseline_log_reg = log_reg.fit(X_train, y)\npredicted_survivors = baseline_log_reg.predict(X_test)\n\nprint('Accuracy: ', metrics.accuracy_score(train.Survived, baseline_log_reg.predict(X_train)))\nsns.heatmap(metrics.confusion_matrix(train.Survived, baseline_log_reg.predict(X_train)),\\\n            cmap=\"Blues\", annot=True)\nplt.xlabel('Pred Label')\nplt.ylabel('True Label')\n\ntest_baseline_model = test\ntest_baseline_model['Survived'] = predicted_survivors\ntest_baseline_model = test_baseline_model[['PassengerId', 'Survived']]\n\n#test_baseline_model.to_csv('test_baseline_model.csv', index=False)","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"27f46b46-3061-4094-90fe-8156d23f4e4f","_uuid":"a1a36fc4ed29235c8f96251e25e3511d7982ac63","trusted":true},"cell_type":"code","source":"first_tree = tree.DecisionTreeClassifier()\n#test['sex_mapped'] = train.Sex.map({'male':1, 'female':0})\nfirst_tree_fit = first_tree.fit(X_train, y)\npredicted_survivors = first_tree_fit.predict(X_test)\n\nprint('Accuracy: ', metrics.accuracy_score(train.Survived, first_tree_fit.predict(X_train)))\nsns.heatmap(metrics.confusion_matrix(train.Survived, first_tree_fit.predict(X_train)), \\\n           cmap=\"Blues\", annot=True)\nplt.xlabel('Pred Label')\nplt.ylabel('True Label')\n\ntest_first_model = test\ntest_first_model['Survived'] = predicted_survivors\ntest_first_model = test_first_model[['PassengerId', 'Survived']]\n\n#test_first_model.to_csv('test_first_model.csv', index=False)","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"2783a872-2a51-446a-9434-07312e02a9bb","_uuid":"90ce4af89110e8852c307e322a0d6365ad9baa47"},"cell_type":"markdown","source":"Ok looks like both these models seem to have ~78% accuracy on the training set, although the tree model seems to be giving a lot more **false negatives**","outputs":[],"execution_count":null},{"metadata":{"_cell_guid":"075cc2ba-fa1c-444a-b6ca-124d628c702a","_uuid":"24bff1dff5d8c2466a21e8287ff3dfb9751051e0"},"cell_type":"markdown","source":"### Further Feature Exploration \n\nExploration for more features - strarting with the children - let's see if the chances of survival increase if people are travelling with a family for males and females and then based on the class they are in","outputs":[],"execution_count":null},{"metadata":{"_cell_guid":"ca32959d-d805-4a0d-b2e3-975ab02e8f61","_uuid":"24da906003e40ed63953ce4176126a69079d9d57","trusted":true},"cell_type":"code","source":"train.pivot_table(columns='Sex', index='Parch',\\\n                  values='Survived', aggfunc='mean').plot(kind='bar')\nprint(train.pivot_table(columns='Sex', index='Parch',\\\n                  values='Survived', aggfunc='mean'))\nprint(train.pivot_table(columns='Sex', index='Parch',\\\n                  values='Survived', aggfunc='count'))","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"d3a82332-478b-44d1-bec7-779995c09ec2","_uuid":"00946fe848c5be91827eb6eed37e690d4d126245"},"cell_type":"markdown","source":"Interesting! women with no childern seem to have a similar survial rate compared to overall surivial rate of women whereas with children have a slightly higher survial rates except those women with exactly 2 children.. which is weird, women with 3 children seem to have a high survival rate again, could it be the women with 2 children stayed back more... doesn't make too much sense. Perhaps where these women come from will offer a better clue. Also men with children have almost a double rate of survival than those who don't!\n\nAlso the tail values of # of children have very few examples, it would be best to combine them so that in best case they don't get completely ignored and in the worst case cause the model to overfit","outputs":[],"execution_count":null},{"metadata":{"_cell_guid":"1701aa3c-2ca4-4890-be96-6be6c9eabda4","_uuid":"90cc0d976bb393d5ddbb63e114c88c530eb31128","trusted":true},"cell_type":"code","source":"train['new_Parch'] = train.Parch\ntrain['new_Parch'] = train.new_Parch.astype(int)\ntrain.loc[train.new_Parch > 1, 'new_Parch'] = 2\nprint(train.pivot_table(index=['Sex', 'Pclass'], columns='new_Parch', values='Survived', aggfunc='mean'))\nprint(train.pivot_table(index=['Sex', 'Pclass'], columns='new_Parch', values='Survived', aggfunc='count'))\ntrain.pivot_table(index=['Sex', 'Pclass'], columns='new_Parch', values='Survived', aggfunc='mean').plot(kind='bar')","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"4df5785d-2553-478f-aa2a-e4f51c96f171","_uuid":"b7d92f54f2032d85e651ff14dd23020c8da35c0d","trusted":true},"cell_type":"code","source":"print(train.pivot_table(index='Sex', columns='SibSp', values='Survived', aggfunc='mean'))\nprint(train.pivot_table(index='Sex', columns='SibSp', values='Survived', aggfunc='count'))\ntrain.pivot_table(index='Sex', columns='SibSp', values='Survived', aggfunc='mean').plot(kind='bar')","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"65dbf938-8ed1-4141-8882-4e870df99138","_uuid":"f09bd7e8470ce3c3f3d948ddb6760e61f0f044ea"},"cell_type":"markdown","source":"same issue as the Parent-Children column the higher number of siblings/spouses is pretty sparse, will be merging them together","outputs":[],"execution_count":null},{"metadata":{"_cell_guid":"93a166b7-c6ec-4acd-bfa7-fe875e47273e","_uuid":"674900be71dbad44dc7d33b550d1a0f07c00d41b","trusted":true},"cell_type":"code","source":"train['new_SibSp'] = train.SibSp\ntrain['new_SibSp'] = train.SibSp.astype(int)\ntrain.loc[train.new_SibSp > 1, 'new_SibSp'] = 2\nprint(train.pivot_table(index='Sex', columns='new_SibSp', values='Survived', aggfunc='mean'))\nprint(train.pivot_table(index='Sex', columns='new_SibSp', values='Survived', aggfunc='count'))\ntrain.pivot_table(index='Sex', columns='new_SibSp', values='Survived', aggfunc='mean').plot(kind='bar')","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"50f68ab8-0c67-4fe2-9aa9-afa3f96fb62f","_uuid":"fd7527ea5f1780a0817ba3a157f6d6478c8f92ba"},"cell_type":"markdown","source":"### Model 2 with 2 new features\n\nTrying out the decision tree and logistic regression models with 4 features now to see if there's any improvements","outputs":[],"execution_count":null},{"metadata":{"_cell_guid":"c53f3220-fe3b-4e21-949b-1c9243f9a986","_uuid":"ced74d6d945ac62fadad2aefaa195a28ff5bc357","collapsed":true,"trusted":true},"cell_type":"code","source":"X_train = train[['male', 'female', 'Pclass', 'new_Parch', 'new_SibSp']]\ny = train['Survived']\n\ntest['new_SibSp'] = test.SibSp\ntest['new_SibSp'] = test.SibSp.astype(int)\ntest.loc[train.new_SibSp > 1, 'new_SibSp'] = 2\n\ntest['new_Parch'] = test.Parch\ntest['new_Parch'] = test.new_Parch.astype(int)\ntest.loc[train.new_Parch > 1, 'new_Parch'] = 2\n\nX_test = test[['male', 'female', 'Pclass', 'new_Parch', 'new_SibSp']]","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"a3c26a1d-7979-40f3-af11-d981abc10e40","_uuid":"3b895aeb56e854e5aa849fd6ac0f3e4ee1a2f6cb","trusted":true},"cell_type":"code","source":"second_tree = tree.DecisionTreeClassifier()\n#test['sex_mapped'] = train.Sex.map({'male':1, 'female':0})\nsecond_tree_fit = second_tree.fit(X_train, y)\npredicted_survivors = second_tree_fit.predict(X_test)\n\nprint('Accuracy: ', metrics.accuracy_score(train.Survived, second_tree_fit.predict(X_train)))\nsns.heatmap(metrics.confusion_matrix(train.Survived, second_tree_fit.predict(X_train)), \\\n           cmap=\"Blues\", annot=True)\nplt.xlabel('Pred Label')\nplt.ylabel('True Label')\n\ntest_second_model = test\ntest_second_model['Survived'] = predicted_survivors\ntest_second_model = test_second_model[['PassengerId', 'Survived']]\n\n#test_second_model.to_csv('test_second_model.csv', index=False)","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"6bb7fa0f-aa7c-4350-bdf9-491220714ddd","_uuid":"fcda2d39b436b59d0ad864b6adb84867ad393d60"},"cell_type":"markdown","source":"Nice! thats a bump of about 2% accuracy on the training set, let's see how it does on test data \n\nUnfortunately this is not giving any advantages on the test score. Let's also train a couple of other models and see their performance using CV to see if we get even better performance","outputs":[],"execution_count":null},{"metadata":{"_cell_guid":"e96e321e-1d7c-4253-a829-54637b45cc64","_uuid":"61bf72fd05065a824cb8e88ffc94b6d3f9138646","trusted":true},"cell_type":"code","source":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.gaussian_process.kernels import RBF\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import cross_val_score\n\nmodel_names = [\n    'KNeighborsClassifier',\n    'SVC(kernel=\"linear\")',\n    'RandomForestClassifier',\n    'AdaBoostClassifier()',\n    'GaussianNB()',\n]\n\nmodels = [\n    KNeighborsClassifier(),\n    SVC(kernel=\"linear\"),\n    RandomForestClassifier(),\n    AdaBoostClassifier(),\n    GaussianNB()\n]\n\nfit_models = []\n\nfor i in range(len(models)):\n    temp_score = cross_val_score(models[i], X_train, y, cv=5)\n    fit_models.append(models[i].fit(X_train,y))\n    print(model_names[i],' ', temp_score.mean())\n    print('+/- ',temp_score.var())","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"9dfd81c6-347d-4da9-9e6b-2f2c75281fab","_uuid":"75f7c426546ea7235df836d6749127fbd0f66792","collapsed":true,"trusted":true},"cell_type":"code","source":"test_rf_model = test\ntest_rf_model['Survived'] = fit_models[2].predict(X_test)\ntest_rf_model = test_rf_model[['PassengerId', 'Survived']]\n#test_rf_model.to_csv('test_rf_model.csv', index=False)","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"0dd5b1a9-cb01-450a-8e90-89edfab099ca","_uuid":"0a33247e70d2ecc86fcd1fdab35d03a20fde249d","trusted":true},"cell_type":"code","source":"print('S embarked survival %:',\\\n      round((train[train.Embarked == 'S']\\\n             .Survived.sum()/train[train.Embarked == 'S'].Survived.count())*100., 3))\nprint('C embarked survival %:',\\\n      round((train[train.Embarked == 'C']\\\n             .Survived.sum()/train[train.Embarked == 'C'].Survived.count())*100., 3))\nprint('Q embarked survival %:',\\\n      round((train[train.Embarked == 'Q']\\\n             .Survived.sum()/train[train.Embarked == 'Q'].Survived.count())*100., 3))","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"5c52034a-9ecb-45e6-a2f0-b43f087cabe0","_uuid":"261d36844fe03ce4f950edbfbc5fe228a46fc29b","trusted":true},"cell_type":"code","source":"print(train.pivot_table(index='Pclass', columns='Embarked', values='Survived', aggfunc='count'))\nprint(train.pivot_table(index='Pclass', columns='Embarked', values='Survived', aggfunc='mean'))\ntrain.pivot_table(index='Pclass', columns='Embarked', values='Survived', aggfunc='mean').plot(kind='bar')","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"d1b0987c-cdef-422a-ae9b-cdda6af172cb","_uuid":"fc49055f4bccd7f13f326a9a57fd9b12a6ba6bbe","collapsed":true},"cell_type":"markdown","source":"There are 2 passengers missing embarked info in the train set, let's see who they are so that we can figure out how best to handle this","outputs":[],"execution_count":null},{"metadata":{"_cell_guid":"081a8b20-6e57-4053-9943-52c40a3f246a","_uuid":"db7988832725dc6397163587d7522745cff901ae","trusted":true},"cell_type":"code","source":"train[train.Embarked.isnull()]","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"ab0d5deb-c01a-4fda-af1f-ab182f31f294","_uuid":"d40d5eaadd7850aa010263fef49d84978a8ad994"},"cell_type":"markdown","source":"we can potentially interpolate the embarked from port based on cabin and fare information - but we can see that most of the people seem to have boarded from southhamton, so we making the assumption these ladies boarded from that port as well. \n","outputs":[],"execution_count":null},{"metadata":{"_cell_guid":"feae890d-4fd6-43e0-85a9-904310235a42","_uuid":"2c8f9a2514d40cc8c2027e8cdf944c19cb961807","collapsed":true,"trusted":true},"cell_type":"code","source":"train.loc[train.Embarked.isnull(), 'Embarked'] = 'S'\ntrain = train.join(pd.get_dummies(train.Embarked))","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"28378a6d-e4c2-44cf-a436-836f8a351aa8","_uuid":"5f5fa9b876c0a73d49c8e0beb67cf3c6c2d54247","collapsed":true,"trusted":true},"cell_type":"code","source":"# doing the same for test, test does not have any null embarked values\ntest = test.join(pd.get_dummies(test.Embarked))","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"50d7fde0-8c37-4de6-a390-05bb862c3834","_uuid":"431f83ad8acbc6d77d7a4197fa8b279c020d4c08"},"cell_type":"markdown","source":"Now let's look at fare. It's true that a large proportion of the 1st class seems to have survived but perhaps there were people in the first class that were not actual passengers but hired help and they may have had a lower rate of survival, lets see if that's the case in the data. Starting off with exploring the fare data in general by class","outputs":[],"execution_count":null},{"metadata":{"_cell_guid":"3cff1ddc-c6bd-4886-9dd1-5533793f7ebd","_uuid":"20007f179f908743afe75cafbf99f3359e4c84a1","trusted":true},"cell_type":"code","source":"sns.distplot(train[train.Pclass == 1].Fare, label='higher class')\nplt.title(train[train.Pclass == 1].Fare.describe())\nplt.legend()\nplt.show()\nsns.distplot(train[train.Pclass == 2].Fare, label='middle class')\nplt.title(train[train.Pclass == 2].Fare.describe())\nplt.legend()\nplt.show()\nsns.distplot(train[train.Pclass == 3].Fare, label='lower class')\nplt.title(train[train.Pclass == 3].Fare.describe())\nplt.legend()","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"ccd476e4-c12a-48d7-808d-068ac864031b","_uuid":"d68051fd87968857348033956feee27bb679b653","trusted":true},"cell_type":"code","source":"median_labels = [m for m in train.groupby(['Survived']).Fare.median()]\nprint(median_labels)\nfig = plt.figure(figsize=(15,5))\nax=sns.boxplot(data=train, x='Survived', y='Fare')","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"3015fd44-ad31-44c2-a151-00b50677dc3d","_uuid":"4061914bd221e32dda1d1a48366e37719d65ac20","trusted":true},"cell_type":"code","source":"median_labels = [m for m in train.groupby(['Pclass', 'Survived']).Fare.median()]\nprint(median_labels)\nfig = plt.figure(figsize=(15,5))\nax=sns.boxplot(data=train, x='Pclass', y='Fare', hue='Survived')\n\nplt.legend()","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"83eb0af5-649b-482e-9a9c-e893d642de4e","_uuid":"4d17c5288cf7d5a49a0539eff155f631ba6e421d","trusted":true},"cell_type":"code","source":"median_labels = [m for m in train.groupby(['Sex', 'Survived']).Fare.median()]\nprint(median_labels)\nfig = plt.figure(figsize=(15,5))\nax=sns.boxplot(data=train, x='Sex', y='Fare', hue='Survived')\n\nplt.legend()","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"fa91bf81-9d40-47b1-837a-2c56097315e0","_uuid":"e9f5438baefd5e058becbd349f41b722267fac03"},"cell_type":"markdown","source":"ok so we can see, the higher the amount paid for the ticket the higher is the rate for survival, which would make sense since higher class implies higher fare and therefore higher rate of survival.\n\nNow to add fare as a feature, there is one missing value of fare missining in the data, let's fix that","outputs":[],"execution_count":null},{"metadata":{"_cell_guid":"be843c24-3f7a-4489-ba82-dd61bcb7391f","_uuid":"26e146a1847ef8266bad5d05922dbeaac6bff4a3","trusted":true},"cell_type":"code","source":"test[test.Fare.isnull()]","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"a46e191a-eb4e-4a1f-bf4a-eb213a6767be","_uuid":"a72e1c55fdf0e434455da61fb27d36448cc887a5","trusted":true},"cell_type":"code","source":"test.loc[test.Fare.isnull(), 'Fare'] = test[(test.Pclass == 3)].Fare.median()\nprint(test[test.PassengerId == 1044])","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"954bc403-bffa-4243-9dc7-56338a2f5abf","_uuid":"9e4c29b4bf134c3a51f74b69a01dc8080774e9c3"},"cell_type":"markdown","source":"Now let's look at age there is a fair bunch of missing values in the age field in both the test and train sets","outputs":[],"execution_count":null},{"metadata":{"_cell_guid":"bd31be4e-0ae2-43f9-89bb-ac3bd103ea2b","_uuid":"d53bddd147e2492330f5eb069b27406201aa64d4","trusted":true},"cell_type":"code","source":"train.Age.describe()","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"555dd3d6-6073-4d83-8e86-36a40a479a2a","_uuid":"b81db47423307b00b0994a49548ee1934e886be1","trusted":true},"cell_type":"code","source":"sns.distplot(train[(~train.Age.isnull()) & (train.Survived == 1)].Age, label = 'Survived')\nsns.distplot(train[(~train.Age.isnull()) & (train.Survived == 0)].Age, label = 'Did Not Survive')\nplt.legend()","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"7a14f4ac-31a0-4f40-bca4-641ff97b7bbb","_uuid":"70c6b0865abc2d81dc3586d1b3855db5fca7a82c"},"cell_type":"markdown","source":"going to use the handy tip I found on Data Quest to bucket the ages up into infants, childrend, teenagers, young adult, adult, senior and missing. Using that here:","outputs":[],"execution_count":null},{"metadata":{"_cell_guid":"c5c09197-8d9c-4826-8ec4-5aba7ec0c0b0","_uuid":"a5323aa7412b0675ebeea208adbc24a71a00b5c7","collapsed":true,"trusted":true},"cell_type":"code","source":"train.loc[train.Age.isnull(), 'Age'] = -0.5\ntrain = train.join(pd.get_dummies(pd.cut(train.Age, [-1,0,5, 12,18,35,60, 100],\\\n       labels=['missing', 'infant', 'child', 'teen', 'youngAdult', 'adult', 'senior'])))\ntrain = train.join(pd.cut(train.Age, [-1,0,5, 12,18,35,60, 100],\\\n       labels=['missing', 'infant', 'child', 'teen', 'youngAdult', 'adult', 'senior']),\\\n                   rsuffix='_class')\n\ntest.loc[~test.Age.isnull(), 'Age'] = -0.5\ntest = test.join(pd.get_dummies(pd.cut(test.Age, [-1,0,5, 12,18,35,60, 100],\\\n       labels=['missing', 'infant', 'child', 'teen', 'youngAdult', 'adult', 'senior'])))","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"1202a024-2b05-4300-9ed6-647f1551b846","_uuid":"edeb73b26e65803ffe79b97ab386927bd2b500ec","trusted":true},"cell_type":"code","source":"sns.barplot(data=train, x='Age_class', y='Survived')","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"e451d34f-bf4e-495a-bd8a-00cb738ebc16","_uuid":"16d14b266d86afbbe83b863f0f142a5c314ac077"},"cell_type":"markdown","source":"so looks like infants have a higher survival rate, let's include this in our model","outputs":[],"execution_count":null},{"metadata":{"_cell_guid":"c9b25295-f240-4fdd-a726-9c4d83075cb0","_uuid":"ee7dfba8137f99f55d33a9d37bd5df897e532b45","collapsed":true,"trusted":true},"cell_type":"code","source":"train = train.join(pd.get_dummies(train.new_SibSp, prefix='SibSp_'))\ntrain = train.join(pd.get_dummies(train.new_Parch, prefix='Parch_'))","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"f7dbbd50-5a4e-4bf6-90a5-376b044c2e35","_uuid":"58f439905a629aacfb2e7b26eef1c2b886f93df3","collapsed":true,"trusted":true},"cell_type":"code","source":"test = test.join(pd.get_dummies(test.new_SibSp, prefix='SibSp_'))\ntest = test.join(pd.get_dummies(test.new_Parch, prefix='Parch_'))","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"29ea0e33-39a7-417c-8bd4-2dab8f1bfd33","_uuid":"95c1cf12f5a3a1d3976661367e50a518aa5c9a14","trusted":true},"cell_type":"code","source":"train.columns","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"3e63f724-0ab1-4773-a6ab-65a9174d1546","_uuid":"d8a5922955eb82d3fbb70dd343441a2657a66029","collapsed":true,"trusted":true},"cell_type":"code","source":"features = ['female', 'male',\n            'Higher', 'Middle', 'Lower', 'C', 'Q', 'S',\n            'missing', 'infant', 'child', 'teen', 'youngAdult', 'adult', 'senior'\n            , 'SibSp__0', 'SibSp__1', 'SibSp__2', 'Parch__0', 'Parch__1', 'Parch__2']\ntarget = ['Survived']","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"5e7be286-6b2c-42f8-b886-384c2784539e","_uuid":"6df86ffc68170af730be867e522400facbdd2368","collapsed":true,"trusted":true},"cell_type":"code","source":"X_train = train[features]\ny = train[target]\n\nX_test = test[features]","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"8da609fd-0114-4e53-921d-75d1b2ffc128","_kg_hide-output":false,"_uuid":"93d412624c4c5a71ae17e1bf9afe63989ef13151","trusted":true},"cell_type":"code","source":"from sklearn.ensemble import GradientBoostingClassifier\n\nmodel_names = [\n     'KNeighborsClassifier()',\n    'SVC(kernel=\"linear\")',\n    'RandomForestClassifier',\n    'AdaBoostClassifier',\n    'GradientBoostingClassifier'\n]\n\nmodels = [\n    KNeighborsClassifier(),\n    SVC(kernel=\"linear\"),\n    RandomForestClassifier(),\n    AdaBoostClassifier(),\n    GradientBoostingClassifier()\n]\n\nfit_models = []\n\nfor i in range(len(models)):\n    temp_score = cross_val_score(models[i], X_train, y, cv=5)\n    fit_models.append(models[i].fit(X_train,y))\n    print(model_names[i],' ', round(temp_score.mean(),2))\n    print('+/- ',temp_score.var())\n    print(metrics.classification_report(y, models[i].predict(X_train)))","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"e8ef01f6-2957-4f20-822d-be9811827eac","_uuid":"ce483793588d351c1ef74ac6f634184f586c4aec","trusted":true},"cell_type":"code","source":"print(round(metrics.accuracy_score(y, fit_models[4].predict(X_train)), 2))\nsns.heatmap(metrics.confusion_matrix(y, fit_models[4].predict(X_train)), cmap='Blues', annot=True)","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"1cdeecfb-46b2-4e4a-b20a-18b5a7195e83","_uuid":"4d1404b7b27a92c15147eb1478cbb868b158d968","collapsed":true,"trusted":true},"cell_type":"code","source":"test_predictions_GBT = test\ntest_predictions_GBT['Survived'] = fit_models[4].predict(X_test)\ntest_predictions_GBT[['PassengerId', 'Survived']].to_csv('test_predictions_GBT.csv', index=False)","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"fa97cc7c-bab4-4ef0-929c-297f378d35f0","_uuid":"bc80a21c679472a7d30b6e4254f7728ae38e187b","trusted":true},"cell_type":"code","source":"test_predictions_GBT[['PassengerId', 'Survived']].head()","execution_count":null,"outputs":[]},{"metadata":{"collapsed":true,"trusted":true,"_uuid":"9a2240e12613fae261d039916ce15b066831a9fb"},"cell_type":"code","source":"","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.6.4","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat":4,"nbformat_minor":1}